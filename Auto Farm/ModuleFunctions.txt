unit ModuleFunctions;

interface

uses 
	SysUtils, Classes, SettingsModule;//, TNpcListModule;
		
var
	Settings: TSettings;
	
	procedure updateState(stateType: string; stateValue: string; value: string); overload;
	procedure updateState(stateType: string; stateValue: string; value: integer); overload;
	function getState(stateType: string; stateValue: string; value: string): string; overload;
	function getState(stateType: string; stateValue: string; value: integer): integer; overload;
	function getState(stateType: string; stateValue: string; value: boolean): boolean; overload;
	function getArray(stateType: string; stateValue: string; value: string): array of integer;
	
	
implementation

procedure updateState;
begin
	Settings.SetFile(Script.Path + User.Name + '_Settings.ini');
	Settings.Save(stateType, stateValue, value);
end;

procedure updateState;
begin
	Settings.SetFile(Script.Path + User.Name + '_Settings.ini');
	Settings.Save(stateType, stateValue, value);
end;

function getState;
begin
	Settings.SetFile(Script.Path + User.Name + '_Settings.ini');
	Result := Settings.Load(stateType, stateValue, value);
end;

function getState;
begin
	Settings.SetFile(Script.Path + User.Name + '_Settings.ini');
	Result := Settings.Load(stateType, stateValue, value);
end;

function getState;
begin
	Settings.SetFile(Script.Path + User.Name + '_Settings.ini');
	Result := Settings.LoadBool(stateType, stateValue, BoolToStr(value));
end;

function getArray;
var
	sl:TStringList;
	i: integer;
	resStr: string;
begin
	sl := TStringList.Create;
	Settings.SetFile(Script.Path + User.Name + '_Settings.ini');
	resStr := Settings.Load(stateType, stateValue, value);
  try
    sl.Delimiter     := ';';
    sl.DelimitedText := resStr;
	SetLength(Result, sl.Count);
	for i:=0 to sl.count-1 do
		Result[i] := StrToInt(sl[i]);

  finally
    sl.Free;
  end;
end;


begin
end.